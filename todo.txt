## HIGH PRIORITY

*   [ ] **Security:**
    *   [ ] **Automate Security Audits:** Add npm script for security audits and integrate with CI/CD pipeline. Use existing audit.ts utility.
*   [ ] **Card Scanner Authentication:** Update card scanner microservice to use the new JWT authentication.
*   [x] **Responsiveness and Mobile-Friendliness**
    *   [ ] **Review Viewport Meta Tag:** (src/app.html) - Ensure it's correctly set up.
    *   [x] **Component Audit:** Inspect all components (Card.svelte, DeckBuilder.svelte, etc.) for responsiveness. Use Tailwind's responsive modifiers (sm:, md:, lg:, xl:) effectively. Ensure text is readable on smaller screens. Check for horizontal scrolling issues.
    *   [x] **Flexible Layouts:** Replace fixed widths with flexible units (%, vw, vh). Utilize flexbox and grid layouts for adaptability.

## MEDIUM PRIORITY

*   [ ] **Authentication Improvements**
    *   [ ] **Password Reset:** Implement "forgot password" functionality.
*   [ ] **Code Improvements**
    *   [ ] **API Endpoint Structure:** Review and refactor API endpoints in (src/lib/server/api/) to ensure optimal structure and maintainability.
*   [ ] **Performance Optimization**
    *   [ ] **Lazy Loading:** Implement lazy loading for images and other resources.
    *   [ ] **Optimize Dockerfile:** Improve Dockerfile for card scanner microservice to reduce image size and build time.
*   [ ] **Testing**
    *   [ ] **Expand End-to-End Tests:** Create Playwright tests for key workflows beyond authentication and deck functionality (e.g., adding cards to collection, creating pods).
*   [ ] **Implement Trading System**
    *   [ ] **Trade Offers:** Allow users to create trade offers for cards.
    *   [ ] **Trade Notifications:** Notify users when they receive a trade offer.
    *   [ ] **Trade History:** Maintain a history of completed trades.
    *   [ ] **Multiway Trades in a Pod:** Enable multiway trades within a pod, allowing multiple users to participate in a single trade.

## LOW PRIORITY

*   [ ] **UI/UX Enhancements**
    *   [ ] **Design System/Style Guide:** Define a color palette, typography, and spacing scale. Document UI patterns for consistency.
    *   [ ] **Component Library:** Create reusable UI components (buttons, inputs, cards, etc.).
    *   [ ] **Accessibility (A11y):** Use semantic HTML. Provide alt text for images. Ensure sufficient color contrast. Make the application keyboard-navigable.
    *   [ ] **Empty States:** Handle empty states with helpful messages and calls to action.
    *   [ ] **Card Images:** Optimize card images (consider Cloudinary or Imgix).
    *   [ ] **Drag and Drop:** (Deck Building) Implement drag-and-drop functionality for adding/removing cards.
*   [ ] **Testing**
    *   [ ] **Accessibility Tests:** Integrate accessibility testing into your CI/CD pipeline.
*   [ ] **Performance Optimization**
    *   [ ] **Code Splitting:** Split your code into smaller chunks for faster initial load times.
    *   [ ] **Caching:** Implement caching strategies for frequently accessed data.